{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultFilterRows = void 0;\n\nvar _cells = require(\"./cells\");\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Default implemention of how we filter rows internally. The idea behind this\n * implementation is to use the given list of row ids and headers to get the\n * individual cell values for a row. Then, we go through each cell value and see\n * if any of them includes the given inputValue.\n *\n * @param {object} config\n * @param {Array<string>} config.rowIds array of all the row ids in the table\n * @param {Array<object>} config.headers\n * @param {object} config.cellsById object containing a map of cell id to cell\n * @param {string} config.inputValue the current input value in the Table Search\n * @returns {Array<string>} rowIds\n */\n\n\nvar defaultFilterRows = function defaultFilterRows(_ref) {\n  var rowIds = _ref.rowIds,\n      headers = _ref.headers,\n      cellsById = _ref.cellsById,\n      inputValue = _ref.inputValue;\n  return rowIds.filter(function (rowId) {\n    return headers.some(function (_ref2) {\n      var key = _ref2.key;\n      var id = (0, _cells.getCellId)(rowId, key);\n      if (typeof cellsById[id].value === 'boolean') return false;\n      return ('' + cellsById[id].value).toLowerCase().includes(inputValue.toLowerCase());\n    });\n  });\n};\n\nexports.defaultFilterRows = defaultFilterRows;","map":{"version":3,"sources":["/Users/ggopinathpatro/Downloads/HMCReactive/carbon-react/carbon-react/node_modules/carbon-components-react/lib/components/DataTable/tools/filter.js"],"names":["Object","defineProperty","exports","value","defaultFilterRows","_cells","require","_ref","rowIds","headers","cellsById","inputValue","filter","rowId","some","_ref2","key","id","getCellId","toLowerCase","includes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;AAEA;;;;;;;AAOA;;;;;;;;;;;;;;;AAaA,IAAIF,iBAAiB,GAAG,SAASA,iBAAT,CAA2BG,IAA3B,EAAiC;AACvD,MAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,MACIC,OAAO,GAAGF,IAAI,CAACE,OADnB;AAAA,MAEIC,SAAS,GAAGH,IAAI,CAACG,SAFrB;AAAA,MAGIC,UAAU,GAAGJ,IAAI,CAACI,UAHtB;AAIA,SAAOH,MAAM,CAACI,MAAP,CAAc,UAAUC,KAAV,EAAiB;AACpC,WAAOJ,OAAO,CAACK,IAAR,CAAa,UAAUC,KAAV,EAAiB;AACnC,UAAIC,GAAG,GAAGD,KAAK,CAACC,GAAhB;AACA,UAAIC,EAAE,GAAG,CAAC,GAAGZ,MAAM,CAACa,SAAX,EAAsBL,KAAtB,EAA6BG,GAA7B,CAAT;AACA,UAAI,OAAON,SAAS,CAACO,EAAD,CAAT,CAAcd,KAArB,KAA+B,SAAnC,EAA8C,OAAO,KAAP;AAC9C,aAAO,CAAC,KAAKO,SAAS,CAACO,EAAD,CAAT,CAAcd,KAApB,EAA2BgB,WAA3B,GAAyCC,QAAzC,CAAkDT,UAAU,CAACQ,WAAX,EAAlD,CAAP;AACD,KALM,CAAP;AAMD,GAPM,CAAP;AAQD,CAbD;;AAeAjB,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultFilterRows = void 0;\n\nvar _cells = require(\"./cells\");\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Default implemention of how we filter rows internally. The idea behind this\n * implementation is to use the given list of row ids and headers to get the\n * individual cell values for a row. Then, we go through each cell value and see\n * if any of them includes the given inputValue.\n *\n * @param {object} config\n * @param {Array<string>} config.rowIds array of all the row ids in the table\n * @param {Array<object>} config.headers\n * @param {object} config.cellsById object containing a map of cell id to cell\n * @param {string} config.inputValue the current input value in the Table Search\n * @returns {Array<string>} rowIds\n */\nvar defaultFilterRows = function defaultFilterRows(_ref) {\n  var rowIds = _ref.rowIds,\n      headers = _ref.headers,\n      cellsById = _ref.cellsById,\n      inputValue = _ref.inputValue;\n  return rowIds.filter(function (rowId) {\n    return headers.some(function (_ref2) {\n      var key = _ref2.key;\n      var id = (0, _cells.getCellId)(rowId, key);\n      if (typeof cellsById[id].value === 'boolean') return false;\n      return ('' + cellsById[id].value).toLowerCase().includes(inputValue.toLowerCase());\n    });\n  });\n};\n\nexports.defaultFilterRows = defaultFilterRows;"]},"metadata":{},"sourceType":"script"}