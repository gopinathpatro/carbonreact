{"ast":null,"code":"var _jsxFileName = \"/Users/ggopinathpatro/Downloads/HMCReactive/carbon-react/carbon-react/src/components/datatables/HMCTable.js\";\nimport React from 'react';\nimport { Button, DataTable } from 'carbon-components-react';\nconst {\n  Table,\n  TableRow,\n  TableHead,\n  TableContainer,\n  TableHeader,\n  TableBody,\n  TableCell\n} = DataTable;\n\nclass HMCTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.rows = [{\n      id: 'a',\n      foo: 'Foo a',\n      bar: 'Bar a',\n      baz: 'Baz a'\n    }, {\n      id: 'b',\n      foo: 'Foo b',\n      bar: 'Bar b',\n      baz: 'Baz b'\n    }, {\n      id: 'c',\n      foo: 'Foo c',\n      bar: 'Bar c',\n      baz: 'Baz c'\n    }];\n    this.headers = [{\n      // `key` is the name of the field on the row object itself for the header\n      key: 'foo',\n      // `header` will be the name you want rendered in the Table Header\n      header: 'Foo'\n    }, {\n      key: 'bar',\n      header: 'Bar'\n    }, {\n      key: 'baz',\n      header: 'Baz'\n    }];\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(DataTable, {\n      rows: initialRows,\n      headers: headers,\n      render: ({\n        rows,\n        headers,\n        getHeaderProps,\n        getRowProps,\n        getTableProps\n      }) => /*#__PURE__*/React.createElement(TableContainer, {\n        title: \"DataTable with expansion\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(Table, Object.assign({}, getTableProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(TableHead, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(TableExpandHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }\n      }), headers.map(header => /*#__PURE__*/React.createElement(TableHeader, Object.assign({\n        key: header.key\n      }, getHeaderProps({\n        header\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }\n      }), header.header)))), /*#__PURE__*/React.createElement(TableBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }\n      }, rows.map(row => /*#__PURE__*/React.createElement(React.Fragment, {\n        key: row.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TableExpandRow, Object.assign({}, getRowProps({\n        row\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }\n      }), row.cells.map(cell => /*#__PURE__*/React.createElement(TableCell, {\n        key: cell.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 19\n        }\n      }, cell.value))), row.isExpanded && /*#__PURE__*/React.createElement(TableExpandedRow, {\n        colSpan: headers.length + 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 19\n        }\n      }, \"Expandable row content\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 19\n        }\n      }, \"Description here\"))))))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }\n    });\n  }\n\n}\n\nexport default HMCTable;","map":{"version":3,"sources":["/Users/ggopinathpatro/Downloads/HMCReactive/carbon-react/carbon-react/src/components/datatables/HMCTable.js"],"names":["React","Button","DataTable","Table","TableRow","TableHead","TableContainer","TableHeader","TableBody","TableCell","HMCTable","Component","rows","id","foo","bar","baz","headers","key","header","render","initialRows","getHeaderProps","getRowProps","getTableProps","map","row","cells","cell","value","isExpanded","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, DataTable } from 'carbon-components-react';\n\nconst { Table,TableRow, TableHead, TableContainer, TableHeader, TableBody, TableCell } = DataTable;\n\nclass HMCTable extends React.Component {\n  // Given that we have the following rows with the fields `foo`, `bar`, and `baz`\n rows = [\n  {\n    id: 'a',\n    foo: 'Foo a',\n    bar: 'Bar a',\n    baz: 'Baz a',\n  },\n  {\n    id: 'b',\n    foo: 'Foo b',\n    bar: 'Bar b',\n    baz: 'Baz b',\n  },\n  {\n    id: 'c',\n    foo: 'Foo c',\n    bar: 'Bar c',\n    baz: 'Baz c',\n  },\n];\n\n// We would have a headers array like the following\n headers = [\n  {\n    // `key` is the name of the field on the row object itself for the header\n    key: 'foo',\n    // `header` will be the name you want rendered in the Table Header\n    header: 'Foo',\n  },\n  {\n    key: 'bar',\n    header: 'Bar',\n  },\n  {\n    key: 'baz',\n    header: 'Baz',\n  },\n];\n\n  render() {\n  return (\n    <DataTable\n  rows={initialRows}\n  headers={headers}\n  render={({ rows, headers, getHeaderProps, getRowProps, getTableProps }) => (\n    <TableContainer title=\"DataTable with expansion\">\n      <Table {...getTableProps()}>\n        <TableHead>\n          <TableRow>\n            {/* add the expand header before all other headers */}\n            <TableExpandHeader />\n            {headers.map(header => (\n              <TableHeader key={header.key} {...getHeaderProps({ header })}>\n                {header.header}\n              </TableHeader>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <React.Fragment key={row.id}>\n              <TableExpandRow {...getRowProps({ row })}>\n                {row.cells.map(cell => (\n                  <TableCell key={cell.id}>{cell.value}</TableCell>\n                ))}\n              </TableExpandRow>\n              {row.isExpanded && (\n                <TableExpandedRow colSpan={headers.length + 1}>\n                  <h1>Expandable row content</h1>\n                  <p>Description here</p>\n                </TableExpandedRow>\n              )}\n            </React.Fragment>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )}\n/>\n  );\n}\n}\n\nexport default HMCTable;\n"]},"metadata":{},"sourceType":"module"}