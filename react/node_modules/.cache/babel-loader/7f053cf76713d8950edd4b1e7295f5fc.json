{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultSortRow = exports.sortRows = exports.compareStrings = exports.compare = void 0;\n\nvar _cells = require(\"./cells\");\n\nvar _sorting = require(\"../state/sorting\");\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Compare two primitives to determine which comes first. Initially, this method\n * will try and figure out if both entries are the same type. If so, it will\n * apply the default sort algorithm for those types. Otherwise, it defaults to a\n * string conversion.\n *\n * @param {number|string} a\n * @param {number|string} b\n * @param {string} locale\n * @returns {number}\n */\n\n\nvar compare = function compare(a, b) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n\n  if (typeof a === 'string' && typeof b === 'string') {\n    return compareStrings(a, b, locale);\n  }\n\n  return compareStrings('' + a, '' + b, locale);\n};\n/**\n * Use the built-in `localeCompare` function available on strings to compare two\n * srints.\n *\n * @param {string} a\n * @param {string} b\n * @param {string} locale\n * @returns {number}\n */\n\n\nexports.compare = compare;\n\nvar compareStrings = function compareStrings(a, b) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n  return a.localeCompare(b, locale, {\n    numeric: true\n  });\n};\n/**\n * Default implementation of how we sort rows internally. The idea behind this\n * implementation is to use the given list of row ids to look up the cells in\n * the row by the given key. We then use the value of these cells and pipe them\n * into our local `compareStrings` method, including the locale where\n * appropriate.\n *\n * @param {object} config\n * @param {Array[string]} config.rowIds array of all the row ids in the table\n * @param {object} config.cellsById object containing a mapping of cell id to\n * cell\n * @param {string} config.direction the sort direction used to determine the\n * order the comparison is called in\n * @param {string} config.key the header key that we use to lookup the cell\n * @param {string} [config.locale] optional locale used in the comparison\n * function\n * @returns {Array[string]} array of sorted rowIds\n */\n\n\nexports.compareStrings = compareStrings;\n\nvar sortRows = function sortRows(_ref) {\n  var rowIds = _ref.rowIds,\n      cellsById = _ref.cellsById,\n      sortDirection = _ref.sortDirection,\n      key = _ref.key,\n      locale = _ref.locale,\n      sortRow = _ref.sortRow;\n  return rowIds.slice().sort(function (a, b) {\n    var cellA = cellsById[(0, _cells.getCellId)(a, key)];\n    var cellB = cellsById[(0, _cells.getCellId)(b, key)];\n    return sortRow(cellA.value, cellB.value, {\n      key: key,\n      sortDirection: sortDirection,\n      locale: locale,\n      sortStates: _sorting.sortStates,\n      compare: compare\n    });\n  });\n};\n\nexports.sortRows = sortRows;\n\nvar defaultSortRow = function defaultSortRow(cellA, cellB, _ref2) {\n  var sortDirection = _ref2.sortDirection,\n      sortStates = _ref2.sortStates,\n      locale = _ref2.locale;\n\n  if (sortDirection === sortStates.ASC) {\n    return compare(cellA, cellB, locale);\n  }\n\n  return compare(cellB, cellA, locale);\n};\n\nexports.defaultSortRow = defaultSortRow;","map":{"version":3,"sources":["/Users/ggopinathpatro/Downloads/HMCReactive/carbon-react/carbon-react/node_modules/carbon-components-react/lib/components/DataTable/tools/sorting.js"],"names":["Object","defineProperty","exports","value","defaultSortRow","sortRows","compareStrings","compare","_cells","require","_sorting","a","b","locale","arguments","length","undefined","localeCompare","numeric","_ref","rowIds","cellsById","sortDirection","key","sortRow","slice","sort","cellA","getCellId","cellB","sortStates","_ref2","ASC"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultSortRow = exports.sortRows = exports.compareStrings = exports.compare = void 0;\n\nvar _cells = require(\"./cells\");\n\nvar _sorting = require(\"../state/sorting\");\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Compare two primitives to determine which comes first. Initially, this method\n * will try and figure out if both entries are the same type. If so, it will\n * apply the default sort algorithm for those types. Otherwise, it defaults to a\n * string conversion.\n *\n * @param {number|string} a\n * @param {number|string} b\n * @param {string} locale\n * @returns {number}\n */\nvar compare = function compare(a, b) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n\n  if (typeof a === 'string' && typeof b === 'string') {\n    return compareStrings(a, b, locale);\n  }\n\n  return compareStrings('' + a, '' + b, locale);\n};\n/**\n * Use the built-in `localeCompare` function available on strings to compare two\n * srints.\n *\n * @param {string} a\n * @param {string} b\n * @param {string} locale\n * @returns {number}\n */\n\n\nexports.compare = compare;\n\nvar compareStrings = function compareStrings(a, b) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n  return a.localeCompare(b, locale, {\n    numeric: true\n  });\n};\n/**\n * Default implementation of how we sort rows internally. The idea behind this\n * implementation is to use the given list of row ids to look up the cells in\n * the row by the given key. We then use the value of these cells and pipe them\n * into our local `compareStrings` method, including the locale where\n * appropriate.\n *\n * @param {object} config\n * @param {Array[string]} config.rowIds array of all the row ids in the table\n * @param {object} config.cellsById object containing a mapping of cell id to\n * cell\n * @param {string} config.direction the sort direction used to determine the\n * order the comparison is called in\n * @param {string} config.key the header key that we use to lookup the cell\n * @param {string} [config.locale] optional locale used in the comparison\n * function\n * @returns {Array[string]} array of sorted rowIds\n */\n\n\nexports.compareStrings = compareStrings;\n\nvar sortRows = function sortRows(_ref) {\n  var rowIds = _ref.rowIds,\n      cellsById = _ref.cellsById,\n      sortDirection = _ref.sortDirection,\n      key = _ref.key,\n      locale = _ref.locale,\n      sortRow = _ref.sortRow;\n  return rowIds.slice().sort(function (a, b) {\n    var cellA = cellsById[(0, _cells.getCellId)(a, key)];\n    var cellB = cellsById[(0, _cells.getCellId)(b, key)];\n    return sortRow(cellA.value, cellB.value, {\n      key: key,\n      sortDirection: sortDirection,\n      locale: locale,\n      sortStates: _sorting.sortStates,\n      compare: compare\n    });\n  });\n};\n\nexports.sortRows = sortRows;\n\nvar defaultSortRow = function defaultSortRow(cellA, cellB, _ref2) {\n  var sortDirection = _ref2.sortDirection,\n      sortStates = _ref2.sortStates,\n      locale = _ref2.locale;\n\n  if (sortDirection === sortStates.ASC) {\n    return compare(cellA, cellB, locale);\n  }\n\n  return compare(cellB, cellA, locale);\n};\n\nexports.defaultSortRow = defaultSortRow;"]},"metadata":{},"sourceType":"script"}